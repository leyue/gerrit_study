1
获得帮助可以使用类似 man git-****的命令格式:
想获得关于 commit 命令的帮助,则 man git-commit
想获得关于 pull 命令的帮助,则 man git-pull
想获得关于 merge 命令的帮助,则 man git-merge
以此类推
2
任何人在使用 git 之前,都要提交简单的个人信息,以便 git 区分不同的提交者身份。
#git config –global user.name “your name”
#git config –global user.email yourname@example.com
3
想新开启一个项目,应该先建立一个目录,例如名为 myproject,然后所有的项目开发内容都在此目录下进行。
#cd myproject
#git init
#git add .
#git commit //这个步骤会自动进入编辑状态,要求提交者输入有关本次提交的“开发信息”
至此,一个新项目就诞生了,第一个开发信息(开发日志)也随之诞生。
4
如果改进了项目源代码,并且到了开发者认为“应该再次记录开发信息”的时候,则提交“工作成果”。
#git commit -a
//这是一个偷懒的命令,相当于 git add .; git commit;
但是,此处有一点应该注意,那就是 git commit -a 无法把新增文件或文件夹加入进来,所以,如果你新增了文件或文
件夹,那么就要老老实实的先 git add .,再 git commit 喽。[此处非常感谢 freeren 的提醒]
5
想检查到目前为止对源码都做了哪些修改(相对于本次工作刚开始之时):
#git diff //这个命令只在 git add 之前使用有效。如果已经 add 了,那么此命令输出为空
#git diff –cached //这个命令在 git add 之后在 git commit 之前有效。
#git status //这个命令在 git commit 之前有效,表示都有哪些文件发生了改动
6
想查看自项目开启到现在的所有开发日志
#git log
#git log -p //会输出非常详细的日志内容,包括了每次都做了哪些源码的修改
7
开启一个试验分支(experimental),如果分支开发成功则合并到主分支(master),否则放弃该试验分支。
#git branch experimental //创建一个试验分支,名称叫 experimental
#git branch //显示当前都有哪些分支,其中标注*为当前所在分支
#git checkout experimental //转移到 experimental 分支
(省略数小时在此分支上的开发过程)...
如果分支开发成功:
#git commit -a //在 experimental 分支改进完代码之后用 commit 在此分支中进行提交
#git checkout master //转移回 master 分支
#git merge experimental //经证实分支开发成功,将 exerimental 分支合并到主分支
#git commit -a //彻底完成此次分支合并,即提交 master 分支
#git branch -d experimental //因为 experimental 分支已提交,所以可安全删除此分支
如果分支开发失败:
#git checkout master
#git branch -D experimental //由于分支被证明失败,因此使用-D 来放弃并删除该分支
8
随时查看图形化分支信息。
#gitk
9
当合作伙伴 bob 希望改进我(rocrocket)的工作成果,则:
bob$git clone /home/rocrocket/project myrepo //此命令用于克隆我的工作到 bob 的 myrepo 目录下。请注意,此命令有可能会
因为/home/rocrocket 的目录权限问题而被拒绝,解决方法是 chmod o+rx /home/rocrocket。
(省略 bob 数小时的开发过程)...
bob$git commit -a //bob 提交自己的改进成果到自己的 git 仓库中,并口头告知我(rocrocket)他已经完成了工作。
我如果非常非常信任 bob 的开发能力:
$ cd /home/rocrocket/project
$ git pull /home/bob/myrepo //pull 命令的意思是从远端 git 仓库中取出(git-fetch)修改的代码,然后合并(git-merge)到我
(rocrocket)的项目中去。读者要记住一个小技巧,那就是“git pull .”命令,它和 git merge 的功能是一样的,以后完全可以用
git pull .来代替 git merge 哦!请注意,git-pull 命令有可能会因为/home/bob 的目录权限问题而被拒绝,解决方法是 chmod o+rx
/home/bob。
如果我不是很信任 bob 的开发能力:
$ cd /home/rocrocket/project
$ git fetch /home/bob/myrepo master:bobworks //此命令意思是提取出 bob 修改的代码内容,然后放到我(rocrocket)工作
目录下的 bobworks 分支中。之所以要放到分支中,而不是 master 中,就是要我先仔仔细细看看 bob 的开发成果,如果我觉得满意,我
merge 到 master 中,如果不满意,我完全可以直接 git branch -D 掉。
$git whatchanged -p master..bobworks //用来查看 bob 都做了什么
$git checkout master //切换到 master 分区
$git pull . bobworks //如果我检查了 bob 的工作后很满意,就可以用 pull 来将 bobworks 分支合并到我的项目中了
$git branch -D bobworks //如果我检查了 bob 的工作后很不满意,就可以用-D 来放弃这个分支就可以了
过了几天,bob 如果想继续帮助我开发,他需要先同步一下我这几天的工作成果,只要在其当初 clone 的 myrepo 目录
下执行 git pull 即可:
#git pull //不用加任何参数,因为当初 clone 的时候,git 已经记住了我(rocrocket)的工作目录,它会直接找到我的目录来取。